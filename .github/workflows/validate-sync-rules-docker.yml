name: Validate Sync Rules with Docker

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # paths: ['supabase/config/sync-rules.yml']
  push:
    branches: ['dev']
    # paths: ['supabase/config/sync-rules.yml']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  validate-sync-rules:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      PS_PORT: 8080
      PS_SUPABASE_JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
      PS_API_TOKEN: use_a_better_token_in_production
    steps:
      - uses: actions/checkout@v4

      - name: Fetch Supabase branch info
        id: supabase-branch
        run: |
          # First get the branch data to get the project ref
          BRANCH_DATA=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_ACCESS_TOKEN }}" \
            https://api.supabase.com/v1/projects/${{ secrets.SUPABASE_PRODUCTION_PROJECT_ID }}/branches)

          # Debug: Print branch data (without sensitive info)
          echo "Branch data structure:"
          echo "$BRANCH_DATA" | jq 'map(del(.db_pass))'

          BRANCH_ID=$(echo $BRANCH_DATA | jq -r --arg branch "${{ env.BRANCH_NAME }}" '.[] | select(.git_branch == $branch) | .id')
          PROJECT_REF=$(echo $BRANCH_DATA | jq -r --arg branch "${{ env.BRANCH_NAME }}" '.[] | select(.git_branch == $branch) | .ref')

          echo "branch_id=$BRANCH_ID" >> $GITHUB_OUTPUT
          echo "project_ref=$PROJECT_REF" >> $GITHUB_OUTPUT

          if [ -n "$BRANCH_ID" ] && [ -n "$PROJECT_REF" ]; then
            echo "Found branch ID: $BRANCH_ID and project ref: $PROJECT_REF"

            # Get branch details to get the database password
            BRANCH_DETAILS=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.SUPABASE_ACCESS_TOKEN }}" \
              "https://api.supabase.com/v1/branches/$BRANCH_ID")
            
            if [ -z "$(echo $BRANCH_DETAILS | jq -r .db_pass)" ]; then
              echo "::error::Failed to get database password from branch details"
              exit 1
            fi
            
            DB_PASS=$(echo $BRANCH_DETAILS | jq -r .db_pass)

            # Get Supavisor config to get the connection details
            SUPAVISOR_CONFIG=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.SUPABASE_ACCESS_TOKEN }}" \
              "https://api.supabase.com/platform/projects/$PROJECT_REF/config/supavisor")
            
            # Debug: Print raw Supavisor config (without sensitive info)
            echo "Raw Supavisor config:"
            echo "$SUPAVISOR_CONFIG" | jq 'del(.connection_string, .connectionString)'

            # Check for API error
            if [ "$(echo $SUPAVISOR_CONFIG | jq -r '.message // empty')" != "" ]; then
              echo "::error::Supavisor API error: $(echo $SUPAVISOR_CONFIG | jq -r '.message')"
              exit 1
            fi

            # Extract database connection details from Supavisor config
            DB_HOST=$(echo $SUPAVISOR_CONFIG | jq -r '.db_host')
            DB_PORT=$(echo $SUPAVISOR_CONFIG | jq -r '.db_port')
            DB_USER=$(echo $SUPAVISOR_CONFIG | jq -r '.db_user')
            DB_NAME=$(echo $SUPAVISOR_CONFIG | jq -r '.db_name')
            
            # Validate all required fields
            if [ -z "$DB_HOST" ] || [ "$DB_HOST" = "null" ] || \
               [ -z "$DB_USER" ] || [ "$DB_USER" = "null" ] || \
               [ -z "$DB_NAME" ] || [ "$DB_NAME" = "null" ]; then
              echo "::error::Missing required database connection details"
              exit 1
            fi
            
            # Validate port number
            if ! [[ "$DB_PORT" =~ ^[0-9]+$ ]] || [ "$DB_PORT" -lt 0 ] || [ "$DB_PORT" -gt 65535 ]; then
              echo "::error::Invalid port number: $DB_PORT"
              echo "Using default port 6543"
              DB_PORT=6543
            fi
            
            # Debug: Print extracted values
            echo "Extracted values:"
            echo "DB_HOST: $DB_HOST"
            echo "DB_PORT: $DB_PORT"
            echo "DB_USER: $DB_USER"
            echo "DB_NAME: $DB_NAME"
            
            # Construct database URL using the password from branch details
            DB_URL="postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
            # Debug: Print URL (with password masked)
            echo "Database URL (password masked):"
            echo "${DB_URL//${DB_PASS}/****}"
            
            echo "PS_DATA_SOURCE_URI=${DB_URL}" >> $GITHUB_ENV
          else
            echo "::warning::No Supabase branch found matching git branch '${{ env.BRANCH_NAME }}', using default database URL."
            echo "PS_DATA_SOURCE_URI=postgresql://postgres:postgres@db:5432/postgres" >> $GITHUB_ENV
          fi

      - name: Run PowerSync with Docker Compose
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: ./supabase/docker-compose-actions.yml
          up-flags: -d
          down-flags: -v

      - name: Wait for PowerSync to startup
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:${PS_PORT}/probes/liveness > /dev/null; then
              echo "PowerSync is ready"
              exit 0
            fi
            echo "Waiting for PowerSync to start... ($i/30)"
            sleep 2
          done
          echo "PowerSync failed to start."
          exit 1

      - name: Validate Sync Rules
        id: validate
        run: |
          # Make the API call and store response
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $PS_API_TOKEN" \
            -H "Content-Type: application/yaml" \
            --data-binary "@supabase/config/sync-rules.yml" \
            http://localhost:${PS_PORT}/api/sync-rules/v1/validate)

          # Debug: Print raw response
          echo "Raw response:"
          echo "$RESPONSE"

          # Validate JSON format
          if ! echo "$RESPONSE" | jq . >/dev/null 2>&1; then
            echo "Error: Invalid JSON response"
            echo "Response was: $RESPONSE"
            exit 1
          fi

          # Parse the JSON response
          VALID=$(echo "$RESPONSE" | jq -r '.valid // false')

          if [ "$VALID" = "true" ]; then
            # Escape the response for GitHub Actions output
            OUTPUT=$(echo "$RESPONSE" | jq -c .)
            echo "status=passed" >> "$GITHUB_OUTPUT"
            echo "output=${OUTPUT}" >> "$GITHUB_OUTPUT"
          else
            # Get errors array if validation failed, with fallback
            ERRORS=$(echo "$RESPONSE" | jq -r '.errors | if type == "array" then join(", ") else tostring end')
            # Escape the response for GitHub Actions output
            OUTPUT=$(echo "$RESPONSE" | jq -c .)
            echo "status=failed" >> "$GITHUB_OUTPUT"
            echo "output=${OUTPUT}" >> "$GITHUB_OUTPUT"
            echo "Validation failed with errors: $ERRORS"
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.validate.outputs.status == 'passed'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: ✅ PowerSync sync rules validation passed.
          comment-tag: validation

      - name: Comment on PR Failure
        if: github.event_name == 'pull_request' && failure() && steps.validate.outputs.status == 'failed'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ❌ PowerSync sync rules validation failed.

            ```
            ${{ steps.validate.outputs.output }}
            ```

            Please fix the issues before merging.
          comment-tag: validation

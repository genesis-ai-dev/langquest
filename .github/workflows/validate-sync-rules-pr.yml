name: Validate Sync Rules on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  PS_PORT: 8080
  PS_API_TOKEN: use_a_better_token_in_production

jobs:
  validate-sync-rules-on-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Get Database URL
        id: supabase-branch
        uses: 0xbigboss/supabase-branch-gh-action@v1
        with:
          supabase-access-token: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          supabase-project-id: ${{ secrets.SUPABASE_PRODUCTION_PROJECT_ID }}

      - name: Setup PowerSync Environment
        run: |
          # Construct database URL from branch info
          DB_URL="postgresql://postgres.${{ steps.supabase-branch.outputs.project_ref }}:${{ steps.supabase-branch.outputs.db_pass }}@aws-0-ca-central-1.pooler.supabase.com:${{ steps.supabase-branch.outputs.db_port }}/postgres"
          echo "PS_DATA_SOURCE_URI=${DB_URL}" >> $GITHUB_ENV
          echo "PS_SUPABASE_JWT_SECRET=${{ steps.supabase-branch.outputs.jwt_secret }}" >> $GITHUB_ENV

      - name: Run PowerSync Container
        uses: hoverkraft-tech/compose-action@v2.2.0
        with:
          compose-file: ./supabase/docker-compose-actions.yml
          up-flags: -d
          down-flags: -v

      - name: Wait for PowerSync to startup
        run: |
          # Set container name
          POWERSYNC_CONTAINER=powersync-powersync-1

          # Check if the container exists
          if ! docker ps -a | grep -q "$POWERSYNC_CONTAINER"; then
            echo "Error: PowerSync container not found"
            docker ps -a
            exit 1
          fi

          # Wait for the service to be healthy
          echo "Waiting for PowerSync to be healthy..."
          for i in {1..30}; do
            # Check container health status
            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $POWERSYNC_CONTAINER)
            
            if [ "$HEALTH_STATUS" = "healthy" ]; then
              echo "PowerSync is healthy and ready"
              exit 0
            fi
            
            # If unhealthy, check logs for potential issues
            if [ "$HEALTH_STATUS" = "unhealthy" ]; then
              echo "PowerSync is unhealthy. Container logs:"
              docker logs $POWERSYNC_CONTAINER
              exit 1
            fi
            
            echo "Waiting for PowerSync to be healthy... ($i/30)"
            if [ $i -eq 15 ]; then
              echo "Checking container logs for potential issues:"
              docker logs $POWERSYNC_CONTAINER
            fi
            
            sleep 2
          done

          echo "PowerSync failed to become healthy within the timeout period"
          echo "Final container logs:"
          docker logs $POWERSYNC_CONTAINER
          exit 1

      - name: Validate Sync Rules
        id: validate
        run: |
          # Set container name
          POWERSYNC_CONTAINER=powersync-powersync-1

          # Make the API call and store response
          echo "Making validation API call..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $PS_API_TOKEN" \
            -H "Content-Type: application/yaml" \
            --data-binary "@supabase/config/sync-rules.yml" \
            "http://localhost:${PS_PORT}/api/sync-rules/v1/validate")

          # Debug: Print raw response
          echo "Raw response:"
          echo "$RESPONSE"

          # Extract the valid field directly using jq
          VALID=$(echo "$RESPONSE" | jq -r '.valid')
          echo "Valid: $VALID"

          # Store the full response for the PR comment
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ "$VALID" = "true" ]; then
            echo "✅ PowerSync sync rules validation passed"
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ PowerSync sync rules validation failed"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ${{ steps.validate.outputs.status == 'passed' && '✅ PowerSync sync rules validation passed.' || '❌ PowerSync sync rules validation failed.' }}

            ${{ steps.validate.outputs.status == 'failed' && format('```json\n{0}\n```', steps.validate.outputs.response) || '' }}
          comment-tag: validation
